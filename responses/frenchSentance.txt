[Bonjour et bienvenue à choisir la bonne base de données pour les applications modernes dans le cadre de notre nouvelle série en ligne West Summit.] [Je m'appelle William Wong et je suis un architecte spécialisé dans les solutions de bases de données.] [Et aujourd'hui, je serai rejoint par Michael Riccardi, notre architecte spécialisé dans les solutions de développement.] [Aujourd'hui.] [Nous sommes très heureux d'être ici pour vous montrer comment des bases de données spécialisées peuvent être utilisées pour améliorer l'échelle, les performances et la disponibilité de vos applications. Notre programme présentera les exigences des applications modernes.] [Nous examinerons ensuite les défis qui peuvent être résolus à l'aide de microservices et de bases de données spécialisées. Avant de voir comment nous pouvons sélectionner les bases de données adaptées à vos charges de travail spécifiques.] [Michael.] [Nous aborderons ensuite un peu plus en profondeur où il modernisera une application, passant d'une pile de bases de données relationnelles monolithique à une application utilisant des bases de données spécialement conçues et vous montrera les différences en termes de performances et d'échelle.] [Commençons donc et examinons les exigences de nos applications modernes.] [Et nous examinons d'abord les applications que nous utilisons tous au quotidien, comme le covoiturage, les médias, le streaming, les services bancaires, les jeux vidéo et les réseaux sociaux.] [Nous commençons à voir des modèles communs.] [Ces modèles peuvent indiquer que des millions d'utilisateurs accèdent à nos applications dans différentes zones géographiques.] [Et ces mêmes utilisateurs s'attendent à des expériences instantanées qui pourraient se résumer à des temps de réponse constants en millisecondes, voire en moins de la milliseconde.] [Nos applications devront être hyperdimensionnées pour répondre aux demandes liées à des événements tels que nos ventes flash ou le traitement de l'urine, puis être réduites à la baisse.] [Nous ne sommes pas utilisés afin de minimiser les coûts.] [Il est prévu de saisir plus de données au cours des trois prochaines années que celles des 30 dernières années.] [Et cela nécessitera des outils spécialisés pour traiter les pétaoctets.] [Si ce n'est pas zéro octet de données structurées et non structurées.] [Si nous prenons le temps de réfléchir aux modèles architecturaux de la plupart de ces applications basées sur le cloud, vous constaterez qu'il s'agit toutes de microservices.] [Cela signifie qu'ils sont hautement distribués, faiblement couplés et accessibles via un P.] [I.] [S.] [Alors, que signifie ce changement d'architecture pour notre base de données sous-jacente alors que nos applications sont désormais découplées en services.] [Cela permet à chacun de ces services de disposer de sa propre base de données indépendante.] [Et cela nous apportera de nombreux avantages, par exemple, nous donnera la possibilité d'hyperdimensionner nos applications, car chaque service et canal de base de données évolue indépendamment.] [Prenons le Black Friday comme cas d'utilisation.] [Il se peut que nous devions adapter notre catalogue et notre service de paiement à des centaines de milliers de demandes simultanées sur une courte période, mais le nombre d'inscriptions d'utilisateurs risque de ne pas augmenter dans la même mesure.] [Un autre avantage est l'agilité accrue.] [Puisque nous pouvons désormais innover plus rapidement sur différents composants.] [Nous pouvons rapidement tester et restaurer de nouvelles versions et fonctionnalités à un niveau modulaire sans avoir à gérer toutes les dépendances couplées complexes liées aux monolithes.] [L'un des défis commerciaux courants consiste à rendre nos applications plus disponibles et, en découplant nos bases de données, nous augmenterons leur disponibilité globale, étant donné que nous ne disposons plus d'une base de données monolithique qui sert de point de conflit unique pour nos événements tels que les déploiements de code, les mises à niveau et les correctifs.] [Maintenant que nous comprenons les avantages du découplage de nos données.] [Pourquoi envisagerions-nous des bases de données spécialement conçues pour nos microservices ?] [Nos développeurs souhaitent disposer de la base de données adaptée aux besoins de nos applications modernes, comme nous l'avons décrit précédemment.] [Et franchement, cette approche universelle qui consiste à utiliser une base de données relationnelle pour tout ne fonctionne tout simplement plus.] [Par exemple, nous pouvons avoir besoin d'une base de données pour fournir des temps de réponse de latence de l'ordre de la microseconde afin de pouvoir afficher rapidement nos sites Web ou pour fournir des temps de réponse cohérents afin de répondre aux demandes des utilisateurs des chirurgiens.] [Et l'architecture relationnelle n'est pas la mieux adaptée à ces cas d'utilisation particuliers.] [En fait, le fait de ne pas utiliser la bonne base de données entraîne généralement des problèmes de performances, un manque d'évolutivité, un manque de flexibilité pour les développeurs et une augmentation de nos coûts globaux.] [Donc, traditionnellement, lorsque je parle à mes clients, c'est un obstacle à l'adoption de ces bases de données spécialement conçues avec des frais généraux opérationnels potentiels.] [Et cela comprenait des investissements dans du matériel et des logiciels initiaux ou une expertise pour les rendre évolutifs, hautement disponibles et performants.] [Et c'est là qu'intervient l'AWS.] [Nous proposerons le portefeuille le plus large et le plus complet de plus de 15 bases de données spécialisées capables de prendre en charge les différents modèles de données en tirant parti du fait que les bases de données personnalisées et entièrement gérées que nous avons créées à partir de zéro. Les clients peuvent désormais gagner du temps et de l'argent, améliorer les performances à grande échelle et innover plus rapidement.] [Nous avons créé des bases de données spécialement conçues pour répondre à tous les cas d'utilisation, comme le document à valeur clé relationnelle en mémoire, le registre de séries chronologiques à colonnes larges et nos bases de données graphiques.] [Maintenant que nous comprenons la nécessité de disposer de bases de données spécialement conçues, comment procéderiez-vous pour sélectionner les bonnes bases de données pour vos cas d'utilisation particuliers ?] [Ce que j'aimerais dire aux gens, c'est qu'au lieu de regarder une liste de 100 bases de données différentes, pourquoi ne pas commencer par réfléchir à des catégories de bases de données communes ?] [Maintenant, nous examinons rapidement les catégories.] [Non seulement vous trouverez cette base de données relationnelle familière sur la gauche, mais vous verrez également d'autres bases de données, comme notre base de données de documents Amazon qui est optimisée pour stocker les données au format Jason.] [Et comme il s'agit d'une base de données sans suite, elle nous donnera la flexibilité nécessaire pour modifier les schémas d'applications, mais elle nous permettra également d'interroger des documents en fonction de n'importe quel attribut.] [Et c'est très pratique pour notre gestion de contenu, nos applications mobiles ou une base de données graphique telle qu'Amazon Neptune, qui nous permet ensuite de travailler avec des ensembles de données hautement connectés.] [Nous pouvons essayer de modéliser cela dans une base de données relationnelle avec des articulations complexes et des requêtes imbriquées, mais notre latence augmentera à mesure que le nombre de nos relations augmentera dans les bases de données graphiques.] [Cependant, cela nous permet de parcourir des millions de relations en quelques secondes, ce qui est idéal pour la détection des fraudes, les réseaux sociaux et nos moteurs de recommandation.] [Enfin, comme une base de données de séries chronologiques comme notre flux temporel Amazon, qui est optimisée pour ingérer des milliards de données de séquence temporelle par jour et nous fournir des fonctions basées sur le temps telles que la corrélation et l'interpolation afin que nous puissions obtenir de meilleures informations à partir de ces données.] [Et c'est idéal pour nos applications de développement IoT ou de suivi d'événements.] [Prenons maintenant le temps d'examiner un peu plus en détail certaines catégories très courantes que j'ai rencontrées chez mes clients.] [Commençons par un modèle de données relationnelles très familier. Les données relationnelles sont hautement structurées, les données sont divisées en tables et les relations imposées par le système sont des clés primaires et référentielles et de bons cas d'utilisation seront les charges de travail pour lesquelles nous ne pouvons pas prédéfinir tous nos modèles d'accès. dès le départ ou si nous avions des applications qui nécessitent une intégrité référentielle élevée et une forte cohérence.] [Comme pour nos systèmes de paiement en ligne.] [Amazon Arora est une base de données native dans le cloud que nous pouvons choisir pour nos modèles relationnels.] [Arora est compatible à la fois avec ma suite et avec Postgres et peut nous aider à améliorer nos performances en fournissant un débit jusqu'à cinq fois supérieur à celui de la version standard.] [Ma suite et trois fois plus que celle de Postgres standard.] [Cela nous aidera à dimensionner automatiquement les ressources de calcul et de stockage et nous avons conçu Billy pour stocker nos données de six manières sur trois zones de disponibilité.] [Et comme il s'agit d'un service géré, il permettra d'automatiser des tâches telles que le déploiement et le provisionnement, des correctifs et des mises à niveau réguliers, des sauvegardes et nous fournira des fonctionnalités de sécurité telles que le chiffrement en transit et au repos.] [Une autre excellente catégorie.] [Pour consulter nos bases de données sur nos valeurs clés.] [Les données de valeur clé sont celles qui utilisent cette méthode simple pour stocker et récupérer des données. Leur point fort réside dans leur conception qui consiste à partitionner ou à partager des données de manière importante, puis à les stocker physiquement en fonction de cette clé de partition.] [Cette conception lui permet de s'adapter horizontalement à pratiquement n'importe quelle taille tout en nous offrant des temps de réponse constants, quelle que soit l'échelle.] [Passons donc en revue un cas d'utilisation d'un jeu en ligne qui doit stocker les données de session d'un utilisateur et qui possède un modèle d'accès défini via une balise de joueur pour récupérer cet ensemble de données.] [Comme il s'agit d'un jeu en ligne, nous voulons garantir une expérience cohérente au joueur, qu'il y ait 10 ou même 100 000 utilisateurs.] [Si le jeu prend son envol dans ce cas d'utilisation particulier, nous utiliserons une base de données de valeurs clés pour obtenir des temps de réponse cohérents, indépendamment de la croissance de l'application.] [Amazon Dynamodb est une base de données spécialisée que nous pouvons choisir pour nos bases de données à valeurs clés.] [Il est entièrement géré et sans serveur, ce qui signifie qu'il se chargera de tous les logiciels de provisionnement, de correctifs, de sécurité et, pour nous aider à dimensionner automatiquement, dynamodb nous permet de créer des applications capables de fournir des temps de réponse à une milliseconde à grande échelle et pour nos applications critiques que nous pourrions utiliser à l'échelle mondiale réplication pour répliquer nos ensembles de données dans plusieurs régions.] [Une catégorie très populaire parmi mes clients concerne les bases de données en mémoire. Les bases de données en mémoire stockent nos données en mémoire plutôt que sur celle-ci, ce qui nous donne des temps de réponse inférieurs à la milliseconde.] [Et c'est idéal pour les cas d'utilisation visant à stocker les données de session d'un utilisateur, à maintenir un classement pour les jeux en ligne ou à former des modèles d'apprentissage automatique.] [Mais le cas d'utilisation le plus courant que j'ai vu chez mes clients est de placer de l'argent ici sous forme d'argent devant nos bases de données relationnelles.] [Cela nous donnera des temps de réponse bien meilleurs pour nos utilisateurs finaux et atténuera les pressions d'échelle en lecture sur la base de données relationnelle sous-jacente, ce qui peut entraîner des problèmes de blocage des ressources et de stabilité, que Makayla vous montrera dans sa démonstration suivante sur les bases de données en mémoire.] [Nous avons le choix entre Amazon Elastic Cache.] [Il s'agit d'un service entièrement géré qui nous permet de fournir des temps de réponse inférieurs à la milliseconde et une mise à l'échelle sans interruption.] [Il est à la fois compatible avec le cache mémoire.] [DM Reedus et les personnes qui l'utilisaient pour le cache mém l'utiliseront généralement pour créer des couches de cations simples et évolutives pour leurs applications sensibles à la latence, tandis que nos utilisateurs de Reddit l'utiliseront pour des cas d'utilisation plus polyvalents, tels que pour leurs jeux, leurs analyses en temps réel et leur apprentissage automatique avec Regis.] [Nous avons également le choix entre Amazon Memory Day Bay, un cluster entièrement géré et durable.] [Le débat sur la mémoire nous fournit des performances ultrarapides et une compatibilité totale avec Regis open source, ce qui nous permet ensuite d'utiliser toutes ces structures de données riches, telles que des ensembles triés pour les classements en ligne en tirant parti.] [Un journal des transactions distribué entre les zones de disponibilité.] [Memory DB nous permet de restaurer rapidement la base de données et de redémarrer sans risque de perte de données, ce qui signifie que nous pouvons désormais l'utiliser comme base de données principale pour les ensembles de données persistants.] [Maintenant que nous comprenons la nécessité et les avantages d'une architecture de base de données découplée et que nous avons examiné certains cas d'utilisation résolus par des bases de données spécialement conçues.] [J'aimerais vous présenter Michaeli qui a mis tout cela en pratique sous la forme d'une manifestation en l'honneur de Michael.] [Merci William.] [Dans cette démo, nous allons examiner des animaux de compagnie géniaux, awesome pets est une entreprise fictive et dans ce scénario inventé, awesome pets est une animalerie en ligne, awesome pets possède toutes les caractéristiques d'une boutique de commerce électronique où vous pouvez parcourir le catalogue, ajouter des articles au panier et découvrir des animaux de compagnie actuellement géniaux tech stack se compose d'un back-end monolithique existant et d'un système monolithique.] [Ma base de données de suites.] [Cette application monolithique intègre toutes les fonctionnalités et fonctionnalités d'un animal de compagnie génial.] [Les animaux de compagnie géniaux font face à de nombreux défis avec leurs monolithes hérités.] [Tout d'abord, ils ont découvert que certaines requêtes sont extrêmement lentes, en particulier en cas de charge élevée.] [Ensuite, chaque requête devenant de plus en plus lente pendant les pics de trafic, les demandes des utilisateurs échouent et les utilisateurs ne peuvent pas effectuer de transactions.] [Enfin, la base de données est à court de ressources et de Seigneur, ce qui peut provoquer le blocage de la base de données et l'indisponibilité de l'ensemble de l'application.] [Si vous essayez également de faire évoluer des applications monolithiques.] [Ces défis peuvent vous sembler très familiers.] [Maintenant, je vais vous montrer comment fonctionne l'ancienne application Awesome Pets en exécutant un simple test.] [Ensuite, je vais vous montrer comment des animaux de compagnie géniaux peuvent être découplés grâce à des microservices et à des bases de données spécialement conçues.] [Comment choisir la bonne base de données pour la bonne tâche et vous montrer les différences de performances entre l'application monolithique existante et l'application de microservices.] [Enfin, j'aborderai brièvement certains des modèles de conception utilisés dans la nouvelle architecture.] [Permettez-moi de commencer par vous montrer un exemple de parcours utilisateur sur des animaux de compagnie géniaux.] [Comme vous pouvez le voir ici lorsque je visite des animaux de compagnie géniaux.] [On me présente le catalogue des animaux de compagnie.] [Le catalogue indique les types d'animaux de compagnie disponibles dans les commentaires et rend compte de chaque type.] [Je peux ajouter des animaux de compagnie au panier en cliquant sur le bouton Ajouter au panier. Une fois que j'ai ajouté tous les animaux de compagnie, je peux regarder la carte et passer à la caisse.] [Sur la page de paiement.] [Je peux saisir toutes les informations nécessaires pour terminer la transaction et confirmer le paiement et, une fois le message de confirmation affiché, le parcours utilisateur est terminé.] [Exécutons maintenant le test de charge pour voir comment l'application monolithique fonctionne sur la charge.] [De nombreux outils sont disponibles pour effectuer des tests de performance tels que le jmètre ou l'artillerie.] [Pour n'en nommer que quelques-uns.] [Mais pour cette démo, je vais utiliser Blaze Meter.] [Ce test simule un véritable parcours utilisateur sur des animaux de compagnie géniaux, où chaque utilisateur reçoit un catalogue d'un article au panier et en soumet un autre.] [Ce test est configuré avec un total de 50 utilisateurs simultanés naviguant dans le trajet pendant une durée de 10 minutes et le nombre d'utilisateurs augmentera progressivement sur une durée d'une minute.] [Enfin, ce test se déroulera dans la région AWS Oregon.] [Je vais maintenant commencer le test de charge et comme le test dure environ 10 minutes, je vais accélérer la vidéo et nous examinerons les résultats une fois le test terminé.] [Le test est maintenant terminé et nous pouvons regarder les résultats sur ces écrans, nous avons deux graphiques.] [Celui de gauche indique le nombre de demandes réussies pendant la durée du test et le nombre de demandes ayant échoué.] [Et le graphique de droite affiche le temps de réponse moyen pendant la durée du test.] [Si nous nous concentrons sur le graphique de droite, nous pouvons constater qu'à mesure que le nombre d'utilisateurs augmente, le temps de réponse moyen de l'application ne cesse d'augmenter, atteignant un temps de réponse maximal d'environ sept secondes.] [Et à un moment donné, les temps de réponse ont chuté de façon drastique à quelques centaines de millisecondes seulement et après quelques minutes, le temps de réponse remonte à sept secondes.] [Si nous regardons le graphique de gauche, nous voyons clairement pourquoi il y a une baisse du temps de réponse vers 1750.] [Nous pouvons constater qu'à l'heure actuelle, presque toutes les demandes échouent et qu'aucune demande n'aboutit.] [Cela nous indique que le site Web était en panne pendant cette période et que la demande de l'utilisateur a échoué très rapidement.] [Allons donc un peu plus loin pour voir la cause de ces problèmes ici.] [J'utilise AWS X ray, un service de suivi qui permet d'analyser plus en détail la demande ayant échoué à partir de la carte du service X Ray.] [Je peux voir mon application monolithique et les requêtes envoyées à la base de données.] [La couleur rouge représente ici le nombre de requêtes qui ont échoué dans la base de données.] [Je vais donc maintenant utiliser X Ray Insights, AWS X Ray Insights identifie où se produisent les problèmes dans les applications, les enregistrements de chaque problème et l'impact associé.] [Et lorsque j'ouvre un aperçu, je peux voir immédiatement quelle est la cause première du problème et l'impact qu'il a. Dans ce cas, cela me dit que 23 % de la demande a échoué dans la base de données.] [Je peux ensuite cliquer sur Analyser les informations pour accéder à chaque demande ayant échoué.] [Une fois que j'ai ouvert une demande qui a échoué, je peux voir tous les composants qui ont été exécutés pour cette demande ainsi que la durée de chacun d'entre eux.] [Dans ce cas précis, la base de données a renvoyé une erreur au bout de 17 secondes en raison d'un blocage.] [Enfin, examinons les mesures basées sur les données pour comprendre plus en détail ce qui s'est passé.] [Si nous nous concentrons sur l'utilisation du processeur, nous pouvons constater que l'utilisation du processeur de la base de données atteint 100 % très rapidement et qu'après quelques minutes d'utilisation continue du processeur à 100 %, l'utilisation de l'adresse IP de la base de données revient à 0 %, puis elle revient à 100 %.] [Cela est dû au fait que la base de données se bloque et redémarre en raison d'une utilisation élevée du processeur.] [Vous pouvez également le valider en examinant d'autres indicateurs tels que right I.] [Opérations et connexions à la base de données.] [Comme nous l'avons vu, cette ancienne application ne fonctionne pas bien, les requêtes peuvent prendre jusqu'à 10 secondes pendant les pics de trafic et les pannes de base de données provoquant des pannes, des animaux de compagnie géniaux pourraient envisager de mettre en œuvre de nombreuses optimisations courantes pour les applications monolithiques.] [Cependant, ils prévoient de multiplier leur croissance par 10 au cours de la prochaine année et ils savent que même avec des optimisations communes pour les applications monolithiques, ils ne seront pas en mesure de soutenir la croissance prévue.] [C'est pourquoi des animaux géniaux ont décidé de passer aux microservices avec des bases de données spécialement conçues.] [Essayons donc de comprendre comment ils décomposent cette application, comment ils ont décidé quelle base de données utiliser pour chaque cas d'utilisation. Dans cette nouvelle architecture, Awesome Pets est divisé en quatre microservices, le panier de commande d'inventaire et le catalogue de l'inventaire.] [Le service Micro utilise dynamodb.] [Les données d'inventaire peuvent être stockées dans un format de valeur clé simple et il existe un schéma bien défini, tel que l'ajout ou la suppression d'animaux de compagnie à l'inventaire.] [Ensuite, nous avons l'ancien traitement.] [Ce cas d'utilisation nécessite la cohérence des données et stocke les données dans un format relationnel dénormalisé.] [Certaines des logiques précédentes peuvent également être réutilisées et c'est pourquoi elle convient parfaitement à une Amazon Aurora compatible avec ma suite.] [Ensuite, nous avons les microservices de distribution.] [La fonctionnalité de casting est la deuxième fonctionnalité la plus utilisée sur Awesome Pet.] [Il comporte un volume élevé de lectures et d'écritures et les temps de réponse nécessaires devraient être de sept millisecondes, comme vous vous en souvenez peut-être lors de la session Williams.] [Il s'agit d'un excellent cas d'utilisation pour une base de données en mémoire telle que celle de Brady sur Elastic Cache.] [Enfin, nous avons le catalogue, le catalogue actuel, interroge tout l'inventaire disponible et gère un compte en fonction du type d'animal de compagnie, car Awesome Pets utilise une base de données relationnelle.] [Ils ne sont actuellement pas en mesure de fournir des fonctionnalités de recherche complètes et, par conséquent, l'une des technologies qu'ils peuvent utiliser pour le catalogue est le service Amazon Open Search.] [La recherche ouverte permet d'assimiler facilement des recherches et d'agréger des milliards de documents.] [Maintenant que nous avons vu à quoi ressemble l'architecture cible, effectuons un autre test de performance pour voir comment fonctionne la nouvelle architecture. Comme vous pouvez le constater, je peux ajouter les paramètres au U.] [R.] [L.] [Pour commencer à utiliser le backend des microservices et dans ces derniers, j'ai à peu près le même nombre d'animaux de compagnie, sinon plus, par rapport à l'application monolithique et les fonctionnalités sont exactement les mêmes.] [Je peux donc commencer et lancer le test pour mon back-end de microservices.] [Comme vous pouvez le constater, le test de performance est identique à la même configuration que le test précédent et le parcours utilisateur est le même.] [Nous obtenons le catalogue, ajoutons une carte et soumettons une commande.] [Et la configuration est également la même avec 50 utilisateurs au total pour une durée maximale de 10 minutes et avec une augmentation d'une minute.] [Alors allons-y, lançons ce nouveau test et examinons les résultats.] [Une fois le test terminé.] [Comme avant, je vais accélérer cette partie de la vidéo jusqu'à la fin du test.] [Jetons un coup d'œil à ces résultats.] [Nous pouvons déjà constater que les performances sont beaucoup plus constantes qu'il n'y a eu aucune erreur lors du test de performance.] [Et dans l'ensemble, le temps de réponse moyen est d'environ 160 millisecondes, soit 45 fois plus rapide que notre application monolithique.] [Jetons donc un coup d'œil à la radiographie et nous pouvons voir ici toutes les interactions entre les microservices.] [Par exemple, nous pouvons voir comment la fonctionnalité d'envoi de toutes les fonctionnalités couvre réellement plusieurs microservices.] [Et ici, nous pouvons voir les appels d'API pour obtenir le catalogue et ajouter des articles au panier.] [Je peux maintenant examiner des traces spécifiques pour approfondir une seule demande de commande. Ici, nous pouvons voir la répartition du temps passé pendant la durée de l'envoi ou de la transaction.] [On peut le voir sous charge.] [Cette opération n'a pris qu'environ 300 millisecondes, soit 25 fois plus rapidement que la soumission à la fonctionnalité de l'application monolithique dans les mêmes conditions. Dans la démo, nous avons vu comment l'architecture des microservices est capable de bien évoluer pour faire face au trafic et fournir des temps de réponse cohérents.] [Une autre caractéristique de cette nouvelle architecture est qu'elle permet d'obtenir une disponibilité bien supérieure.] [Si l'une des bases de données tombe en panne, un seul des microservices est affecté et l'application peut encore fonctionner partiellement en passant aux microservices.] [Non seulement nous pouvons nous adapter et améliorer nos performances, mais nous pouvons également bénéficier d'une plus grande disponibilité.] [Enfin, j'aimerais mentionner brièvement les motifs de conception qui ont été utilisés dans cette composition.] [La première est la notification des événements dans cette nouvelle architecture.] [Le microservice du catalogue doit être mis à jour chaque fois qu'un article est ajouté ou retiré de l'inventaire.] [Pour implémenter ce modèle, nous utilisons les flux de dynamodb, qui est une fonctionnalité de dynamodb qui vous permet de diffuser chaque modification sur la table.] [Le deuxième modèle est le modèle saga.] [Ce modèle nous permet d'exécuter des transactions commerciales sur plusieurs microservices.] [Dans cet exemple, le modèle de cycle a été implémenté à l'aide des fonctions d'étape AWS et la transaction couvre l'inventaire, la commande et les microservices cat.] [Si vous souhaitez en savoir plus sur les modèles de microservices.] [Je vous recommande de regarder la session intitulée Créer des microservices brésiliens à l'aide de modèles tolérants aux pannes. Au cours de cette session, nous avons examiné les exigences des applications modernes d'aujourd'hui.] [Nous avons ensuite étudié les raisons pour lesquelles les clients sont passés d'une approche universelle à des bases de données conçues à cet effet.] [Nous avons examiné comment vous pouvez choisir la bonne base de données pour la bonne tâche et nous avons vu comment elle peut vous aider à atteindre une plus grande échelle, de meilleures performances et une plus grande disponibilité.] [Nous avons abordé un certain nombre de sujets différents au cours de cette session, mais l'apprentissage ne doit pas s'arrêter là.] [Nous vous encourageons à consulter notre contenu de formation et de certification.] [Nous proposons plus de 500 cours numériques gratuits qui peuvent vous aider, vous et votre équipe, à acquérir de nouvelles compétences en matière de cloud et à découvrir les derniers services.] [Et au fur et à mesure que vous développez vos compétences, pensez à vous préparer à l'une de nos 11 certifications AWS.] [Vous pouvez scanner les codes QR de cette diapositive pour en savoir plus.] [Merci d'avoir assisté à cette conférence.] [Nous aimerions connaître vos commentaires pour nous aider à améliorer l'expérience du sommet AWS.] [N'oubliez donc pas de répondre à l'enquête de session.]